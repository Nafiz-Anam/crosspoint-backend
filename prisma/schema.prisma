// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Branch {
  id         String   @id @default(uuid())
  branchId   String   @unique // Format: BR-001, BR-002, etc.
  name       String
  address    String
  city       String // Italian city
  postalCode String // Italian postal code (CAP)
  province   String // Italian province (2-letter code)
  phone      String? // Branch phone number
  email      String? // Branch email
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  employees Employee[]
  clients   Client[]
  invoices  Invoice[]

  @@map("branches")
}

model Employee {
  id                           String       @id @default(uuid())
  employeeId                   String?      @unique // Format: EMP-BR001-001, EMP-BR002-001, etc.
  nationalIdentificationNumber String       @unique // Codice fiscale (unique, required)
  email                        String       @unique
  name                         String?
  password                     String
  role                         Role         @default(EMPLOYEE)
  branchId                     String?
  branch                       Branch?      @relation(fields: [branchId], references: [id])
  dateOfBirth                  DateTime // Required field for birthday notifications
  profileImage                 String? // Profile image URL
  isEmailVerified              Boolean      @default(false)
  isActive                     Boolean      @default(true)
  createdAt                    DateTime     @default(now())
  updatedAt                    DateTime     @updatedAt
  Token                        Token[] // Relation with Token model
  attendances                  Attendance[] // Relation with Attendance model
  permissions                  Permission[] // Array of permissions (no relation needed)
  Invoice                      Invoice[]
  assignedTasks                Task[]

  @@map("employees")
}

model Attendance {
  id         String           @id @default(uuid())
  employeeId String
  employee   Employee         @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  date       DateTime         @default(now()) // Date of attendance
  checkIn    DateTime? // Check-in timestamp
  checkOut   DateTime? // Check-out timestamp
  totalHours Float? // Total hours worked (calculated)
  status     AttendanceStatus @default(ABSENT)
  notes      String? // Additional notes (late arrival, early departure, etc.)
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt

  @@unique([employeeId, date]) // One attendance record per user per day
  @@map("attendances")
}

model Service {
  id           String        @id @default(uuid())
  serviceId    String
  name         String
  price        Float // Added price field
  category     String? // Service category
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  invoiceItems InvoiceItem[]
  tasks        Task[]

  @@map("services")
}

model Client {
  id                           String    @id @default(uuid())
  clientId                     String?   @unique // Format: CLT-BR001-001, CLT-BR002-001, etc.
  nationalIdentificationNumber String    @unique // Codice fiscale (unique, required)
  name                         String
  email                        String    @unique
  phone                        String?
  address                      String?
  city                         String? // Italian city
  postalCode                   String? // Italian postal code (CAP)
  province                     String? // Italian province (2-letter code)
  branchId                     String
  branch                       Branch    @relation(fields: [branchId], references: [id])
  // Removed status field - not used for clients
  createdAt                    DateTime  @default(now())
  updatedAt                    DateTime  @updatedAt
  invoices                     Invoice[]
  tasks                        Task[]

  @@map("clients")
}

model Invoice {
  id             String        @id @default(uuid())
  invoiceId      String?       @unique // Format: INV-BR001-2024-001, INV-BR002-2024-001, etc.
  clientId       String
  client         Client        @relation(fields: [clientId], references: [id])
  taskId         String? // Optional: Invoice can be generated from a task
  task           Task?         @relation(fields: [taskId], references: [id])
  invoiceNumber  String        @unique
  totalAmount    Float
  subTotalAmount Float
  discountAmount Float
  taxAmount      Float
  taxRate        Float
  status         InvoiceStatus @default(UNPAID)
  dueDate        DateTime
  issuedDate     DateTime      @default(now())
  branchId       String
  branch         Branch        @relation(fields: [branchId], references: [id])
  notes          String?
  thanksMessage  String
  paymentTerms   String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  items          InvoiceItem[]
  employeeId     String
  employee       Employee      @relation(fields: [employeeId], references: [id])
  paymentMethod  String        @default("Internet Banking") // Added: Payment method
  bankAccountId  String?
  bankAccount    BankAccount?  @relation(fields: [bankAccountId], references: [id])

  // Company Information Fields
  companyName    String? // Company name
  companyTagline String? // Company tagline
  companyAddress String? // Company address
  companyCity    String? // Company city
  companyPhone   String? // Company phone
  companyEmail   String? // Company email
  companyWebsite String? // Company website
  companyLogo    String? // Company logo URL

  @@map("invoices")
}

model InvoiceItem {
  id          String   @id @default(uuid())
  invoiceId   String
  invoice     Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  serviceId   String
  service     Service  @relation(fields: [serviceId], references: [id])
  description String
  rate        Float
  discount    Float    @default(0)
  total       Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Token {
  id          String    @id @default(uuid())
  token       String    @db.VarChar(255)
  type        TokenType
  expires     DateTime
  blacklisted Boolean
  createdAt   DateTime  @default(now())
  employee    Employee  @relation(fields: [employeeId], references: [id])
  employeeId  String
  // Session tracking fields
  sessionId   String?   @unique // Unique session identifier
  deviceInfo  String? // Device/browser information
  ipAddress   String? // IP address of the session
  userAgent   String? // User agent string
  isActive    Boolean   @default(true) // Whether this session is currently active
}

model BankAccount {
  id            String   @id @default(uuid())
  bankName      String
  bankCountry   String? // Optional country field
  bankIban      String?  @unique // Optional and unique
  bankSwiftCode String? // Optional
  accountName   String? // Optional account holder name
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  invoices Invoice[]

  @@map("bank_accounts")
}

model Task {
  id                 String     @id @default(uuid())
  taskId             String?    @unique // Format: TSK-BR001-2024-001, TSK-BR002-2024-001, etc.
  title              String
  description        String?
  clientId           String
  client             Client     @relation(fields: [clientId], references: [id])
  serviceId          String
  service            Service    @relation(fields: [serviceId], references: [id])
  assignedEmployeeId String
  assignedEmployee   Employee   @relation(fields: [assignedEmployeeId], references: [id])
  status             TaskStatus @default(PENDING)
  dueDate            DateTime?
  startDate          DateTime?
  completedDate      DateTime?
  estimatedHours     Float?
  actualHours        Float?
  notes              String?
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  invoices           Invoice[]

  @@map("tasks")
}

model Otp {
  id        String   @id @default(uuid())
  email     String   @unique
  otp       String
  expiresAt DateTime
  attempts  Int      @default(0)
  verified  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("otps")
}

enum Role {
  ADMIN
  HR
  EMPLOYEE
  MANAGER
}

enum TokenType {
  ACCESS
  REFRESH
  RESET_PASSWORD
  VERIFY_EMAIL
}

enum Permission {
  // Client Management
  CREATE_CLIENT
  READ_CLIENT
  UPDATE_CLIENT
  DELETE_CLIENT

  // Service Management
  CREATE_SERVICE
  READ_SERVICE
  UPDATE_SERVICE
  DELETE_SERVICE

  // Invoice Management
  CREATE_INVOICE
  READ_INVOICE
  UPDATE_INVOICE
  DELETE_INVOICE

  // Task Management
  CREATE_TASK
  READ_TASK
  UPDATE_TASK
  DELETE_TASK
  ASSIGN_TASK

  // Bank Account Management
  CREATE_BANK_ACCOUNT
  READ_BANK_ACCOUNT
  UPDATE_BANK_ACCOUNT
  DELETE_BANK_ACCOUNT

  // Report Management
  GENERATE_REPORTS
  VIEW_REPORTS

  // User Management
  CREATE_EMPLOYEE
  READ_EMPLOYEE
  UPDATE_EMPLOYEE
  DELETE_EMPLOYEE
  MANAGE_EMPLOYEES
  ASSIGN_PERMISSIONS

  // Branch Management
  CREATE_BRANCH
  READ_BRANCH
  UPDATE_BRANCH
  DELETE_BRANCH

  // Payment Methods Management
  CREATE_PAYMENT_METHOD
  READ_PAYMENT_METHOD
  UPDATE_PAYMENT_METHOD
  DELETE_PAYMENT_METHOD
}

enum InvoiceStatus {
  UNPAID
  PAID
  OVERDUE
  CANCELLED
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  HALF_DAY
  LEAVE
  HOLIDAY
}

enum ClientStatus {
  ACTIVE
  PENDING
  PROCESSING
  CANCELLED
  COMPLETED
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
  ON_HOLD
}

model SecurityEvent {
  id         String   @id @default(uuid())
  type       String // LOGIN_ATTEMPT, SUSPICIOUS_IP, MULTIPLE_DEVICES, etc.
  userId     String
  sessionId  String?
  ipAddress  String
  userAgent  String
  deviceInfo String
  severity   String // LOW, MEDIUM, HIGH, CRITICAL
  details    String
  metadata   String? // JSON string for additional data
  createdAt  DateTime @default(now())

  @@map("security_events")
}
